import { assert } from 'chai';
import CoreApi from '../src/http/CoreApi';
import { allure } from 'allure-mocha/runtime';
import { Cat, allCats } from '../@types/common';
import { AxiosResponse } from 'axios';




describe('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å –∫–æ—Ç–æ–º', async () => {
    it('allure', async () => {

        console.info('—à–∞–≥ 1 üöÄ:', '–±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∞');
        const listResponse: AxiosResponse<allCats> = await allure.step(
            `–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å GET /cats/all`,
            async () => {
                console.info('—à–∞–≥ 1 üöÄ:', '–≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å GET /cats/all');
                const response = await CoreApi.getAllCats();
                if (response.status !== 200) {
                    assert.fail(
                        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ç–æ–≤`
                    );
                }
                const data = JSON.stringify(response.data, null, 2);
                console.info('—à–∞–≥ 1 üöÄ:', '–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å GET /cats/all:\n', data);
                allure.attachment('attachment', data, 'application/json');
                return response;
            }
        );

        let flatCatCollection: Cat[] = [];
        listResponse.data.groups.forEach((group) => flatCatCollection = flatCatCollection.concat(group.cats))
        const randomCat = flatCatCollection[Math.floor(Math.random() * (flatCatCollection.length - 1))];
        const randomCatId = randomCat.id;


        console.info('—à–∞–≥ 2 üöÄ:', '–±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å –∫–æ—Ç–∞ —Å id:\n', randomCatId);
        const deleteResponse: AxiosResponse<Cat> = await allure.step(
            `–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å DELETE /cats/${randomCatId}/remove`,
            async () => {
                console.info('—à–∞–≥ 2 üöÄ:', `–≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å DELETE /cats/${randomCatId}/remove`);
                const response = await CoreApi.removeCat(randomCatId);
                if (response.status !== 200) {
                    assert.fail(
                        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—Ç–∞ —Å id: ${randomCatId}`
                    );
                }
                const data = JSON.stringify(response.data, null, 2);
                console.info('—à–∞–≥ 2 üöÄ:', `–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å DELETE /cats/${randomCatId}/remove:\n`, data);
                allure.attachment('attachment', data, 'application/json');
                return response;
            }
        );

        if (deleteResponse.data.id !== randomCatId) {
            assert.fail(
                `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. Id —É–¥–∞–ª—è–µ–º–æ–≥–æ –∫–æ—Ç–∞: ${randomCatId} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Id —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—Ç–∞: ${deleteResponse.data.id}`
            );
        } else {
            await allure.step(
                '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–∂–∏–¥–∞–µ–º—ã–º',
                () => {
                    console.info('–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–∂–∏–¥–∞–µ–º—ã–º');
                    allure.attachment('actual', deleteResponse.data.id.toString(), 'text/plain');
                    allure.attachment('expected', randomCatId.toString(), 'text/plain');
                }
            );
        }



        console.info('—à–∞–≥ 3 üöÄ:', '–±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—Ç–∞ —Å id:\n', randomCatId);
        const getDeletedCatResponse: AxiosResponse<Cat> = await allure.step(
            `–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å GET /get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ${randomCatId}`,
            async () => {
                console.info('—à–∞–≥ 3 üöÄ:', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å GET /get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ', randomCatId);
                const response = await CoreApi.getCatById(randomCatId);
                console.log(response);
                if (response.status == 200) {
                    assert.fail(
                        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–æ—Ç —Å id: ${randomCatId} –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã!`
                    );
                }
                const data = JSON.stringify(response.data, null, 2);
                console.info('—à–∞–≥ 3 üöÄ:', '–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å GET /get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º', randomCatId, ':\n', data);
                allure.attachment('attachment', data, 'application/json');
                return response;
            }
        );

        await allure.step(
            '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            () => {
                assert.ok(getDeletedCatResponse.status === 404);
                console.info('–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∫–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω—ã–π!');
            }
        );

    });
});
