import { assert } from 'chai';
import CoreApi from '../src/http/CoreApi';
import LikeApi from '../src/http/LikeApi';
import { allure } from 'allure-mocha/runtime';
import { Cat, allCats } from '../@types/common';
import { AxiosResponse } from 'axios';




describe('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤ –∫–æ—Ç–∞', async () => {
    it('–ª–∞–π–∫–∏', async () => {
        console.info('–¢–ï–°–¢ –ù–ê –õ–ê–ô–ö–ò');
        console.info('—à–∞–≥ 1 üöÄ:', '–±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∞');
        const listResponse: AxiosResponse<allCats> = await allure.step(
            `–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å GET /cats/all`,
            async () => {
                console.info('—à–∞–≥ 1 üöÄ:', '–≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å GET /cats/all');
                const response = await CoreApi.getAllCats();
                if (response.status !== 200) {
                    assert.fail(
                        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ç–æ–≤`
                    );
                }
                const data = JSON.stringify(response.data, null, 2);
                console.info('—à–∞–≥ 1 üöÄ:', '–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å GET /cats/all');
                allure.attachment('attachment', data, 'application/json');
                return response;
            }
        );

        let flatCatCollection: Cat[] = [];
        listResponse.data.groups.forEach((group) => flatCatCollection = flatCatCollection.concat(group.cats))
        const randomCat = flatCatCollection[Math.floor(Math.random() * (flatCatCollection.length - 1))];
        const randomCatId = randomCat.id;
        const randomCatLikesBefore = randomCat.likes;
        const likesDelta = 5;

        await allure.step('–≤—ã–±—Ä–∞–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∞', () => {
            allure.attachment('attachment', JSON.stringify(randomCat), 'application/json');
            console.info('—à–∞–≥ 2 üöÄ:', `–≤—ã–±—Ä–∞–ª–∏ –∫–æ—Ç–∞ —Å id=${randomCatId} –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤: ${randomCatLikesBefore}`);
        })


        console.info('—à–∞–≥ 3 üöÄ:', `–Ω–∞–∫—Ä—É—Ç–∏–º +${likesDelta} –ª–∞–π–∫–æ–≤ –∫–æ—Ç—É —Å id:${randomCatId}`);
        await allure.step(
            `–≤—ã–ø–æ–ª–Ω—è–µ–º ${likesDelta} —Ä–∞–∑ –∑–∞–ø—Ä–æ—Å—ã POST /cats/${randomCatId}/likes`,
            async () => {
                console.info('—à–∞–≥ 3 üöÄ:', `–≤—ã–ø–æ–ª–Ω—è–µ–º ${likesDelta} —Ä–∞–∑ –∑–∞–ø—Ä–æ—Å—ã POST /cats/${randomCatId}/likes`);

                for(let i = 1; i <= likesDelta; i++) {
                    const response = await LikeApi.likes(randomCatId, {like: true, dislike: false});
                    if (response.status !== 200) {
                        assert.fail(
                            `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞ –∫–æ—Ç—É —Å id: ${randomCatId}`
                        );
                    }
                    const data = JSON.stringify(response.data, null, 2);
                    allure.attachment(`attachment_${i}`, data, 'application/json');
                }
                console.info('—à–∞–≥ 3 üöÄ:', `—É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ${likesDelta} —Ä–∞–∑ –∑–∞–ø—Ä–æ—Å—ã POST /cats/${randomCatId}/likes`);
            }
        );



        console.info('—à–∞–≥ 4 üöÄ:', '–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç –∫–æ—Ç–∞ —Å id:', randomCatId);
        const getCatResponse: AxiosResponse<{cat: Cat}> = await allure.step(
            `–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å GET /get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ${randomCatId}`,
            async () => {
                console.info('—à–∞–≥ 4 üöÄ:', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å GET /get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ', randomCatId);
                const response = await CoreApi.getCatById(randomCatId);

                if (response.status !== 200) {
                    assert.fail(
                        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ—Ç—É —Å id: ${randomCatId}`
                    );
                }
                const data = JSON.stringify(response.data, null, 2);
                console.info('—à–∞–≥ 4 üöÄ:', '–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å GET /get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º', randomCatId);
                allure.attachment('attachment', data, 'application/json');
                return response;
            }
        );

        await allure.step(
            '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤',
            () => {
                const likesExpected = randomCatLikesBefore + likesDelta;
                assert.ok(getCatResponse.data.cat.likes === likesExpected);
                console.info('–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤. –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω—ã–π!\n');
            }
        );

    });

    it('–¥–∏–∑–ª–∞–π–∫–∏', async () => {
        console.info('–¢–ï–°–¢ –ù–ê –î–ò–ó–õ–ê–ô–ö–ò');
        console.info('—à–∞–≥ 1 üöÄ:', '–±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∞');
        const listResponse: AxiosResponse<allCats> = await allure.step(
            `–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å GET /cats/all`,
            async () => {
                console.info('—à–∞–≥ 1 üöÄ:', '–≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å GET /cats/all');
                const response = await CoreApi.getAllCats();
                if (response.status !== 200) {
                    assert.fail(
                        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞ –∫–æ—Ç–æ–≤`
                    );
                }
                const data = JSON.stringify(response.data, null, 2);
                console.info('—à–∞–≥ 1 üöÄ:', '–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å GET /cats/all');
                allure.attachment('attachment', data, 'application/json');
                return response;
            }
        );

        let flatCatCollection: Cat[] = [];
        listResponse.data.groups.forEach((group) => flatCatCollection = flatCatCollection.concat(group.cats))
        const randomCat = flatCatCollection[Math.floor(Math.random() * (flatCatCollection.length - 1))];
        const randomCatId = randomCat.id;
        const randomCatDislikesBefore = randomCat.dislikes;
        const dislikesDelta = 10;

        await allure.step('–≤—ã–±—Ä–∞–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∞', () => {
            allure.attachment('attachment', JSON.stringify(randomCat), 'application/json');
            console.info('—à–∞–≥ 2 üöÄ:', `–≤—ã–±—Ä–∞–ª–∏ –∫–æ—Ç–∞ —Å id=${randomCatId} –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∏–∑–ª–∞–π–∫–æ–≤: ${randomCatDislikesBefore}`);
        })


        console.info('—à–∞–≥ 3 üöÄ:', `–Ω–∞–∫—Ä—É—Ç–∏–º +${dislikesDelta} –¥–∏–∑–ª–∞–π–∫–æ–≤ –∫–æ—Ç—É —Å id:${randomCatId}`);
        await allure.step(
            `–≤—ã–ø–æ–ª–Ω—è–µ–º ${dislikesDelta} —Ä–∞–∑ –∑–∞–ø—Ä–æ—Å—ã POST /cats/${randomCatId}/likes`,
            async () => {
                console.info('—à–∞–≥ 3 üöÄ:', `–≤—ã–ø–æ–ª–Ω—è–µ–º ${dislikesDelta} —Ä–∞–∑ –∑–∞–ø—Ä–æ—Å—ã POST /cats/${randomCatId}/likes`);

                for(let i = 1; i <= dislikesDelta; i++) {
                    const response = await LikeApi.likes(randomCatId, {like: false, dislike: true});
                    if (response.status !== 200) {
                        assert.fail(
                            `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∏–∑–ª–∞–π–∫–∞ –∫–æ—Ç—É —Å id: ${randomCatId}`
                        );
                    }
                    const data = JSON.stringify(response.data, null, 2);
                    allure.attachment(`attachment_${i}`, data, 'application/json');
                }
                console.info('—à–∞–≥ 3 üöÄ:', `—É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ${dislikesDelta} —Ä–∞–∑ –∑–∞–ø—Ä–æ—Å—ã POST /cats/${randomCatId}/likes`);
            }
        );



        console.info('—à–∞–≥ 4 üöÄ:', '–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç –∫–æ—Ç–∞ —Å id:', randomCatId);
        const getCatResponse: AxiosResponse<{cat: Cat}> = await allure.step(
            `–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å GET /get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ${randomCatId}`,
            async () => {
                console.info('—à–∞–≥ 4 üöÄ:', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å GET /get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ', randomCatId);
                const response = await CoreApi.getCatById(randomCatId);

                if (response.status !== 200) {
                    assert.fail(
                        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ—Ç—É —Å id: ${randomCatId}`
                    );
                }
                const data = JSON.stringify(response.data, null, 2);
                console.info('—à–∞–≥ 4 üöÄ:', '–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å GET /get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º', randomCatId);
                allure.attachment('attachment', data, 'application/json');
                return response;
            }
        );

        await allure.step(
            '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–∑–ª–∞–π–∫–æ–≤',
            () => {
                const dislikesExpected = randomCatDislikesBefore + dislikesDelta;
                assert.ok(getCatResponse.data.cat.dislikes === dislikesExpected);
                console.info('–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–∑–ª–∞–π–∫–æ–≤. –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω—ã–π!\n');
            }
        );

    });
});
